<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="reference_cd3_bs3_rt">
  <title><keyword keyref="adminUtil"/> Command Reference</title>
  <shortdesc><filepath><keyword keyref="adminUtil"/></filepath> is the <keyword keyref="prodLong"/>
    administration utility.</shortdesc>
  <prolog>
    <metadata>
      <othermeta name="author" content="Michael Khmelnitsky"/>
    </metadata>
  </prolog>
  <refbody>
    <section>
      <title>Usage</title>
      <codeblock><keyword keyref="adminUtilCLI"/> <varname>[global options]</varname> <varname>command</varname> <varname>[command options]</varname> <varname>[arguments...]</varname></codeblock>
    </section>
    <section>
      <title>Global Options</title>
      <dl>
        <dlentry>
          <dt><filepath>--help</filepath>, <filepath>-h</filepath></dt>
          <dd>Show help.</dd>
        </dlentry>
        <dlentry>
          <dt><filepath>--version</filepath>, <filepath>-v</filepath></dt>
          <dd>Print the version.</dd>
        </dlentry>
      </dl>
    </section>
    <section>
      <title>Commands</title>
      <dl>
        <dlentry>
          <dt><filepath>api</filepath></dt>
          <dd>Set <keyword keyref="adminUtilCLI"/> to use the specified <keyword keyref="prodShort"
            /> config store for subsequent operations. For
            example:<codeblock>$ <keyword keyref="adminUtilCLI"/> api http://hcf-consul-server.hcf:8501</codeblock></dd>
        </dlentry>
        <dlentry>
          <dt><filepath>config</filepath></dt>
          <dd>Manipulate configuration values of <keyword keyref="prodShort"/> components.<ul
              id="ul_x4n_dtj_rt">
              <li><xref href="#reference_cd3_bs3_rt/config_get" format="dita"><filepath>config
                    get</filepath></xref></li>
              <li><xref href="#reference_cd3_bs3_rt/config_set" format="dita"><filepath>config
                    set</filepath></xref></li>
            </ul></dd>
        </dlentry>
        <dlentry>
          <dt><filepath>help</filepath></dt>
          <dd>Show a list of commands or help for one command</dd>
        </dlentry>
        <dlentry>
          <dt><filepath>role</filepath></dt>
          <dd>Manage node roles. By default, uses the <codeph>$DOCKER_HOST</codeph> environment
            variable to determine the docker server endpoint. Use the <filepath>--node</filepath>
            flag to stop <xref href="#available_role_containers" format="dita"
              >a <varname>&lt;role></varname> container</xref> on a specific node.<ul
              id="ul_blk_nhj_rt">
              <li><xref href="#reference_cd3_bs3_rt/role_start" format="dita"><filepath>role
                    start</filepath></xref></li>
              <li><xref href="#reference_cd3_bs3_rt/role_stop_restart" format="dita"><filepath>role
                    stop</filepath></xref></li>
              <li><xref href="#reference_cd3_bs3_rt/role_stop_restart" format="dita"><filepath>role
                    restart</filepath></xref></li>
            </ul></dd>
        </dlentry>
      </dl>
      <dl>
        <dlentry>
          <dt><filepath>status</filepath></dt>
          <dd>Retrieve the status of a <keyword keyref="prodShort"/> cluster.<dl>
              <dlentry>
                <dt><filepath>--all</filepath>, <filepath>-a</filepath></dt>
                <dd>Show each individual process, for
                  example:<codeblock>$ <keyword keyref="adminUtilCLI"/> status --all</codeblock></dd>
              </dlentry>
            </dl></dd>
        </dlentry>
      </dl>
    </section>
    <section>
      <title>Command Options</title>
      <dl>
        <dlentry id="config_get">
          <dt><filepath><keyword keyref="adminUtilCLI"/> config get <varname>[command
                options]</varname>
              <varname>[arguments...]</varname></filepath></dt>
          <dd>Look up the current and default values of a configuration, for example: <codeblock>$ <keyword keyref="adminUtilCLI"/> config get nats/user</codeblock><codeblock>$ <keyword keyref="adminUtilCLI"/> config get nats/password</codeblock><codeblock>$ <keyword keyref="adminUtilCLI"/> config get nats/machines</codeblock><dl>
              <dlentry>
                <dt><filepath>--quiet</filepath>, <filepath>-q</filepath></dt>
                <dd>Output only the config values.</dd>
              </dlentry>
              <dlentry>
                <dt><filepath>--role</filepath>, <filepath>-r</filepath></dt>
                <dd>Get <xref href="#available_role_containers" format="dita">a
                    specific role's</xref> config variable, for example:
                  <codeblock>$ <keyword keyref="adminUtilCLI"/> config get --role uaa uaa/jwt/signing_key</codeblock><codeblock>$ <keyword keyref="adminUtilCLI"/> config get --role hm9000 hm9000/url</codeblock></dd>
              </dlentry>
            </dl></dd>
        </dlentry>
        <dlentry id="config_set">
          <dt><filepath><keyword keyref="adminUtilCLI"/> config set <varname>[command
                options]</varname>
              <varname>[arguments...]</varname></filepath></dt>
          <dd>Set the current value of a configuration.<dl>
              <dlentry>
                <dt><filepath>--role</filepath>, <filepath>-r</filepath></dt>
                <dd>Set <xref href="#available_role_containers" format="dita">a
                    specific role's</xref> configuration.</dd>
              </dlentry>
              <dlentry>
                <dt><filepath>--file</filepath>, <filepath>-f</filepath></dt>
                <dd>Read values from file or from stdin if followed by dash (-).</dd>
              </dlentry>
            </dl></dd>
        </dlentry>
      </dl>
      <dl>
        <dlentry id="role_start">
          <dt><filepath><keyword keyref="adminUtilCLI"/> role start <varname>[command
                options]</varname>
              <varname>[arguments...]</varname></filepath></dt>
          <dd>Start the <xref href="#available_role_containers" format="dita"
                ><varname>&lt;role></varname> container</xref>.<dl>
              <dlentry>
                <dt><filepath>--node</filepath>, <filepath>-n</filepath></dt>
                <dd>Set the Docker server endpoint. Schemes and port number are required. Supported
                  schemes: <codeph>tcp://</codeph>
                  <codeph>unix://</codeph>
                  <codeph>http://</codeph>
                  <codeph>https://</codeph></dd>
              </dlentry>
            </dl></dd>
        </dlentry>
        <dlentry id="role_stop_restart">
          <dt><filepath><keyword keyref="adminUtilCLI"/> role stop <varname>[command
                options]</varname>
              <varname>[arguments...]</varname></filepath></dt>
          <dt><filepath><keyword keyref="adminUtilCLI"/> role restart <varname>[command
                options]</varname>
              <varname>[arguments...]</varname></filepath></dt>
          <dd>Stop or restart the <xref href="#available_role_containers"
              format="dita"><varname>&lt;role></varname> container</xref>.<dl>
              <dlentry>
                <dt><filepath>--node</filepath>, <filepath>-n</filepath></dt>
                <dd>Set the Docker server endpoint. Schemes and port number are required. Supported
                  schemes: <codeph>tcp://</codeph>
                  <codeph>unix://</codeph>
                  <codeph>http://</codeph>
                  <codeph>https://</codeph></dd>
              </dlentry>
              <dlentry>
                <dt><filepath>--timeout</filepath>, <filepath>-t "0"</filepath></dt>
                <dd>Set the number of seconds to wait before killing the container.</dd>
              </dlentry>
            </dl></dd>
        </dlentry>
      </dl>
      <draft-comment author="michaelk">To find descriptions, go here
        https://github.com/cloudfoundry/cf-release/tree/v217/jobs and drill down to
        &lt;component>/spec</draft-comment>
    </section>
    <section id="available_role_containers">
      <title>Available <varname>&lt;role></varname>
        Containers</title>
    </section>
    <table frame="all" rowsep="1" colsep="1" id="table_cls_wfz_wt">
      <tgroup cols="2">
        <colspec colname="c1" colnum="1" colwidth="1*"/>
        <colspec colname="c2" colnum="2" colwidth="2.5*"/>
        <thead>
          <row>
            <entry><varname>&lt;role></varname> Container</entry>
            <entry>Description</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>uaa<draft-comment author="michaelk">uaa</draft-comment></entry>
            <entry>The UAA is the identity management service for Cloud Foundry. It's primary role
              is as an OAuth2 provider, issuing tokens for client applications to use when they act
              on behalf of Cloud Foundry users. It can also authenticate users with their Cloud
              Foundry credentials, and can act as an SSO service using those credentials (or
              others). It has endpoints for managing user accounts and for registering OAuth2
              clients, as well as various other management functions.</entry>
          </row>
          <row>
            <entry>stats<draft-comment author="michaelk">collector</draft-comment></entry>
            <entry>The collector will discover the various components on the message bus and query
              their `/healthz` and `/varz` interfaces. The metric data collected is published to
              collector plugins such as OpenTSDB, AWS CloudWatch and DataDog.</entry>
          </row>
          <row>
            <entry>runner<draft-comment author="michaelk">dea_next</draft-comment></entry>
            <entry>The DEA is responsible for running customer applications and maintaining
              associated routes as live. It also periodically advertises its capacity to the Cloud
              Controllers and accepts requests to start and stop applications.</entry>
          </row>
          <row>
            <entry>router<draft-comment author="michaelk">gorouter</draft-comment></entry>
            <entry>The Router maintains a list of live routes for the applications running on each
              DEA. The Router load balances requests (based on their Host header) between each
              application instance registered for a specific route. It requires to be behind a load
              balancer that can terminate SSL connections.</entry>
          </row>
          <row>
            <entry>postgres<draft-comment author="michaelk">postgres</draft-comment></entry>
            <entry>The Postgres server provides a single instance Postgres database that can be used
              with the Cloud Controller or the UAA. It does not provide highly-available
              configuration.</entry>
          </row>
          <row>
            <entry>nats<draft-comment author="michaelk">nats</draft-comment></entry>
            <entry>The NATS server provides publish-subscribe messaging system for the Cloud
              Controller, the DEA , HM9000, and other Cloud Foundry components.</entry>
          </row>
          <row>
            <entry>loggregator_trafficcontroller</entry>
            <entry/>
          </row>
          <row>
            <entry>hm9000<draft-comment author="michaelk">hm9000</draft-comment></entry>
            <entry>The HM9000 periodically compares expected list of running applications as
              specified by the Cloud Controller against a list of actually running applications as
              reported by the DEAs. It tries to reconcile found differences.</entry>
          </row>
          <row>
            <entry>ha_proxy<draft-comment author="michaelk">haproxy</draft-comment></entry>
            <entry>The HAProxy server can be used to terminate SSL in front of the Routers. Each
              HAProxy instance should point to multiple Routers.</entry>
          </row>
          <row>
            <entry>etcd<draft-comment author="michaelk">etcd_metrics_server</draft-comment></entry>
            <entry>The ETCD Metrics Server is meant to be collocated with the ETCD server to collect
              and expose runtime statistics for the Collector.</entry>
          </row>
          <row>
            <entry>doppler</entry>
            <entry/>
          </row>
          <row>
            <entry>consul<draft-comment author="michaelk">consul_agent</draft-comment></entry>
            <entry/>
          </row>
          <row>
            <entry>clock_global<draft-comment author="michaelk"
                >cloud_controller_clock</draft-comment></entry>
            <entry>The Cloud Controller clock periodically schedules Cloud Controller clean up tasks
              for app usage events, audit events, failed jobs, and more. Only single instance of
              this job is necessary.</entry>
          </row>
          <row>
            <entry>api_worker<draft-comment author="michaelk"
                >cloud_controller_worker</draft-comment></entry>
            <entry>Cloud Controller worker processes background tasks submitted via the.</entry>
          </row>
          <row>
            <entry>api<draft-comment author="michaelk">cloud_controller_ng</draft-comment></entry>
            <entry>The Cloud Controller provides primary Cloud Foundry API that is by the CF CLI.
              The Cloud Controller uses a database to keep tables for organizations, spaces, apps,
              services, service instances, user roles, and more. Typically multiple instances of
              Cloud Controller are load balanced.</entry>
          </row>
        </tbody>
      </tgroup>
    </table>
  </refbody>
</reference>
